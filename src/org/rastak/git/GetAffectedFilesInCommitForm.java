/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.rastak.git;

import org.rastak.git.util.UserAutoCompleter;
import org.rastak.git.util.ButtonEditor;
import java.awt.Desktop;
import java.awt.HeadlessException;
import java.awt.Toolkit;
import java.awt.datatransfer.Clipboard;
import java.awt.datatransfer.DataFlavor;
import java.awt.datatransfer.Transferable;
import java.awt.datatransfer.UnsupportedFlavorException;
import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Properties;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import org.apache.commons.io.FileUtils;
import org.apache.commons.lang.StringUtils;
import org.apache.poi.util.IOUtils;

/**
 *
 * @author r.rastakfard
 */
public class GetAffectedFilesInCommitForm extends javax.swing.JFrame {

    public static final String CHANGE_LIST_FILE_NAME = "changeListFilePaths.txt";
    public static final String SEPARATOR = "/";
    public static final String CONFIG_FILE_NAME = "/Settings.properties";
    Properties properties = new Properties();
    public static final String SOURCE_HOME = "\\generated-sources";
    public static final String ALL_IN_ONE_PLACE_FOLDER_NAME = "/allInOnePlace/";
    private boolean notFoundFile = false;
    private String saveResultPath = "";
    Set<String> users = new HashSet<String>();
    private String baseProjectPath = "";
    private String lastChangedListPath = "";
    ChangeListPanel changeListPanel = new ChangeListPanel(this);

    public ChangeListPanel getChangeListPanel() {
        return changeListPanel;
    }

    public String getSaveResultPath() {
        return saveResultPath;
    }

    /**
     * Creates new form GetAffectedFilesInCommitForm
     */
    public GetAffectedFilesInCommitForm() throws FileNotFoundException, IOException {
        initComponents();
        File configFile = new File(System.getProperty("user.dir") + CONFIG_FILE_NAME);
        if (configFile.exists()) {
            properties.load(new FileInputStream(configFile));
            updateUIBasedOnProperties(properties);

        }
        if (StringUtils.isEmpty(saveProjectPathInp.getText())) {
            saveProjectPathInp.setText(System.getProperty("user.dir") + SOURCE_HOME);
        }
        if (StringUtils.isEmpty(numberOfCommitsLbl.getText())) {
            numberOfCommitsLbl.setText("0");
        }

        if (StringUtils.isEmpty(baseProjectPath)) {
            disableSearchCommits();
        } else {
            if (checkValidRepo(baseProjectPath)) {
                users = getGITUsers();
            } else {
                disableSearchCommits();
                return;
            }
        }
        ButtonEditor buttonEditor = new ButtonEditor(new JCheckBox(), this);
        commitsTable.getColumn("-").setCellRenderer(buttonEditor);
        commitsTable.getColumn("-").setCellEditor(buttonEditor);
        new UserAutoCompleter(authorNameLike, users);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        mainPanel = new javax.swing.JPanel();
        searchAndFillCommitIdInputBtn = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        authorNameLike = new javax.swing.JTextField();
        commiteMessageLike = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        pasteFromClipboard = new javax.swing.JButton();
        loadLatestVersion = new javax.swing.JCheckBox();
        getSourcesFromGitBtn = new javax.swing.JButton();
        clearSearchCommitPanelBtn = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        numberOfCommitsLbl = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        commitsTable = new javax.swing.JTable();
        selectAllCommits = new javax.swing.JCheckBox();
        alarmMessageLbl = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        saveProjectPathSelector = new javax.swing.JButton();
        projectBasePathSelectorBtn = new javax.swing.JButton();
        baseProjectPathInp = new javax.swing.JTextField();
        saveProjectPathInp = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        resetUIToConfigValue = new javax.swing.JButton();
        saveConfig = new javax.swing.JButton();
        openSavedFolderBtn = new javax.swing.JButton();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setResizable(false);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Get Sources From GIT Server ");

        mainPanel.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        searchAndFillCommitIdInputBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        searchAndFillCommitIdInputBtn.setText("Search GIT For Commits");
        searchAndFillCommitIdInputBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAndFillCommitIdInputBtnActionPerformed(evt);
            }
        });

        jLabel6.setText("Author Name Like");

        authorNameLike.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                authorNameLikeKeyTyped(evt);
            }
        });

        jLabel5.setText("Commit Message Like");

        jLabel3.setText("Commits Information");

        pasteFromClipboard.setText("Add From Clipboard");
        pasteFromClipboard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteFromClipboardActionPerformed(evt);
            }
        });

        loadLatestVersion.setText("Load Latest Version of selected sources");

        getSourcesFromGitBtn.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        getSourcesFromGitBtn.setText("Get Sources From GIT");
        getSourcesFromGitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getSourcesFromGitBtnActionPerformed(evt);
            }
        });

        clearSearchCommitPanelBtn.setText("Clear Panel");
        clearSearchCommitPanelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearSearchCommitPanelBtnActionPerformed(evt);
            }
        });

        jLabel10.setText("Number of Commits: ");

        commitsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "*", "Commit ID", "Message", "-"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Boolean.class, java.lang.String.class, java.lang.String.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        commitsTable.setIntercellSpacing(new java.awt.Dimension(10, 1));
        jScrollPane3.setViewportView(commitsTable);
        if (commitsTable.getColumnModel().getColumnCount() > 0) {
            commitsTable.getColumnModel().getColumn(0).setMinWidth(25);
            commitsTable.getColumnModel().getColumn(0).setPreferredWidth(25);
            commitsTable.getColumnModel().getColumn(0).setMaxWidth(25);
            commitsTable.getColumnModel().getColumn(3).setMinWidth(60);
            commitsTable.getColumnModel().getColumn(3).setPreferredWidth(60);
            commitsTable.getColumnModel().getColumn(3).setMaxWidth(60);
        }

        selectAllCommits.setText("Select All");
        selectAllCommits.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                selectAllCommitsItemStateChanged(evt);
            }
        });
        selectAllCommits.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllCommitsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(loadLatestVersion)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(numberOfCommitsLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                                .addComponent(searchAndFillCommitIdInputBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(clearSearchCommitPanelBtn)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(pasteFromClipboard))
                            .addComponent(authorNameLike, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(commiteMessageLike, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane3)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addComponent(selectAllCommits)
                                .addGap(0, 0, Short.MAX_VALUE)))
                        .addGap(20, 20, 20))
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addComponent(getSourcesFromGitBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                        .addComponent(alarmMessageLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 358, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(29, Short.MAX_VALUE))))
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(commiteMessageLike, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(authorNameLike, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(searchAndFillCommitIdInputBtn)
                    .addComponent(clearSearchCommitPanelBtn)
                    .addComponent(pasteFromClipboard))
                .addGap(7, 7, 7)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectAllCommits)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(loadLatestVersion)
                    .addComponent(numberOfCommitsLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(getSourcesFromGitBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(alarmMessageLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));

        jLabel1.setText("Project Path");

        saveProjectPathSelector.setText("Browse");
        saveProjectPathSelector.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveProjectPathSelectorActionPerformed(evt);
            }
        });

        projectBasePathSelectorBtn.setText("Browse");
        projectBasePathSelectorBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                projectBasePathSelectorBtnActionPerformed(evt);
            }
        });

        baseProjectPathInp.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                baseProjectPathInpKeyReleased(evt);
            }
        });

        jLabel4.setText("Save Path");

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(baseProjectPathInp, javax.swing.GroupLayout.DEFAULT_SIZE, 628, Short.MAX_VALUE)
                    .addComponent(saveProjectPathInp))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(projectBasePathSelectorBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveProjectPathSelector, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(baseProjectPathInp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(projectBasePathSelectorBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(saveProjectPathInp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveProjectPathSelector))
                .addContainerGap())
        );

        resetUIToConfigValue.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/rastak/git/util/realod-icon.png"))); // NOI18N
        resetUIToConfigValue.setToolTipText("Reload Settings");
        resetUIToConfigValue.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetUIToConfigValueActionPerformed(evt);
            }
        });

        saveConfig.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/rastak/git/util/save-icon.png"))); // NOI18N
        saveConfig.setToolTipText("Save Settings");
        saveConfig.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveConfigActionPerformed(evt);
            }
        });

        openSavedFolderBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/rastak/git/util/open-file-icon.png"))); // NOI18N
        openSavedFolderBtn.setToolTipText("Open Download Directory");
        openSavedFolderBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openSavedFolderBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(openSavedFolderBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveConfig, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(resetUIToConfigValue, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jLabel2)
                    .addComponent(resetUIToConfigValue, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveConfig, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(openSavedFolderBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void projectBasePathSelectorBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectBasePathSelectorBtnActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        if (!StringUtils.isEmpty(baseProjectPath)) {
            fileChooser.setCurrentDirectory(new File(baseProjectPath));
        } else {
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        }
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            // user selects a file
            File selectedFile = fileChooser.getSelectedFile();
            boolean validRepo = checkValidRepo(selectedFile.getAbsolutePath());
            if (validRepo) {
                baseProjectPathInp.setText(selectedFile.getAbsolutePath());
                baseProjectPath = selectedFile.getAbsolutePath();
                enableSearchCommits();
                users = getGITUsers();
            } else {
                disableSearchCommits();
                users = new HashSet<String>();
                JOptionPane.showMessageDialog(this, "Please select a valid GIT repository.");
            }
        }
    }//GEN-LAST:event_projectBasePathSelectorBtnActionPerformed

    private boolean checkValidRepo(String selectedDir) {
        List<String> isGitRepoCommand = new ArrayList<String>();
        isGitRepoCommand.add("git");
        isGitRepoCommand.add("rev-parse");
        isGitRepoCommand.add("--is-inside-work-tree");
        String processCommandResult = processCommand(selectedDir, isGitRepoCommand);
        if (processCommandResult.startsWith("true")) {
            return true;
        } else {
            return false;
        }

    }

    private void saveProjectPathSelectorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveProjectPathSelectorActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        if (!StringUtils.isEmpty(saveResultPath)) {
            fileChooser.setCurrentDirectory(new File(saveResultPath));
        } else {
            fileChooser.setCurrentDirectory(new File(System.getProperty("user.home")));
        }
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        int result = fileChooser.showOpenDialog(this);
        if (result == JFileChooser.APPROVE_OPTION) {
            // user selects a file
            File selectedFile = fileChooser.getSelectedFile();
            System.out.println(selectedFile.getAbsolutePath());
            saveProjectPathInp.setText(selectedFile.getAbsolutePath());
            saveResultPath = selectedFile.getAbsolutePath();
        }
    }//GEN-LAST:event_saveProjectPathSelectorActionPerformed

    private void resetUIToConfigValueActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetUIToConfigValueActionPerformed
        updateUIBasedOnProperties(properties);
    }//GEN-LAST:event_resetUIToConfigValueActionPerformed

    private void saveConfigActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveConfigActionPerformed
        try {
            properties.setProperty("ProjectPath", baseProjectPathInp.getText());
            properties.setProperty("SaveProjectPath", saveProjectPathInp.getText());
            properties.setProperty("CommitMessageLike", commiteMessageLike.getText());
            properties.setProperty("AuthorNameLike", authorNameLike.getText());
//            properties.setProperty("CommitIds", commitIdsInp2.getText());
            properties.setProperty("LastChangedList", lastChangedListPath);
            properties.setProperty("AuthorNameLikeForDiff", changeListPanel.getAuthorName());
            properties.setProperty("FromCommit", changeListPanel.getFromCommit());
            properties.setProperty("ToCommit", changeListPanel.getToCommit());
            properties.setProperty("LoadLatestVersion", String.valueOf(loadLatestVersion.isSelected()));
            properties.setProperty("NumberOfCommits", numberOfCommitsLbl.getText() == null ? "" : numberOfCommitsLbl.getText());
            properties.store(new FileOutputStream(new File(System.getProperty("user.dir") + CONFIG_FILE_NAME)), "GIT UTILITY Settings.");

        } catch (FileNotFoundException ex) {
            Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (evt != null) {
            JOptionPane.showMessageDialog(this, "Settings saved to Settings.properties file.");
        }

    }//GEN-LAST:event_saveConfigActionPerformed

    private void clearSearchCommitPanelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearSearchCommitPanelBtnActionPerformed
        commiteMessageLike.setText("");
        authorNameLike.setText("");
        clearCommitsTable();
    }//GEN-LAST:event_clearSearchCommitPanelBtnActionPerformed

    private void getSourcesFromGitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getSourcesFromGitBtnActionPerformed
        alarmMessageLbl.setText("Start downloading files from GIT server. Please wait...");
        Thread fetchSourcesFromGITServerRunner = new Thread(new Runnable() {
            public void run() {
                fetchSourcesFromGITServer();
            }
        });
        fetchSourcesFromGITServerRunner.start();        
        
    }//GEN-LAST:event_getSourcesFromGitBtnActionPerformed

    private void fetchSourcesFromGITServer() throws HeadlessException {
        try {
            if (fillBaseProjectPath() == null) {
                alarmMessageLbl.setText("");
                return;
            }
            if (fillBaseSaveProjectPath() == null) {
                alarmMessageLbl.setText("");
                return;
            }
            if (commitsTable.getRowCount() == 0) {
                alarmMessageLbl.setText("");
                JOptionPane.showMessageDialog(this, "Please search commit ids first.");
                return;
            }
            deleteLastSavedSources();
            try {
                List<String> commitIds = getCommiteIdsFromTable(true);
                if (commitIds.isEmpty()) {
                    alarmMessageLbl.setText("");
                    JOptionPane.showMessageDialog(this, "Please select at least one commit.");
                    return;
                }
                saveResultPath = saveProjectPathInp.getText();
                baseProjectPath = baseProjectPathInp.getText();
                
                HashMap<String, List<String>> affectedFilesInCommit = getAffectedFilesInCommits(commitIds);
                if (!affectedFilesInCommit.isEmpty()) {
                    File changeListFile = new File(saveResultPath + SEPARATOR + CHANGE_LIST_FILE_NAME);
                    if (changeListFile.exists()) {
                        changeListFile.delete();
                    }
                    StringBuilder builder = new StringBuilder();
                    Set<String> resultChangedList = new HashSet<String>();
                    int filesCount = 0;
                    for (String commitedId : affectedFilesInCommit.keySet()) {
                        commitedId = commitedId.trim();
                        List<String> changedList = affectedFilesInCommit.get(commitedId);
                        appendCommitedFilesInChangeListFile(changeListFile, commitedId, changedList);
                        resultChangedList.addAll(changedList);
                    }
                    filesCount += resultChangedList.size();
                    for (String commitedFilePath : resultChangedList) {
                        builder.append(commitedFilePath + "\n");
                    }
                    UpdateChangeListPanel(resultChangedList, commitIds.get(0), commitIds.get(commitIds.size() - 1));
                    alarmMessageLbl.setText("Download Completed. Enjoy!");
                    JOptionPane.showMessageDialog(null, changeListPanel, "Change List Files", JOptionPane.PLAIN_MESSAGE);
                }
            } catch (IOException ex) {
                alarmMessageLbl.setText("Problem Occurred in downloding file.");
                Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (IOException ex) {
            alarmMessageLbl.setText("Problem Occurred in downloding file.");
            Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void deleteLastSavedSources() throws IOException {
        File saveResultPathFile = new File(saveResultPath);
        FileUtils.forceMkdir(saveResultPathFile);
        final File[] files = saveResultPathFile.listFiles();
        for (File f : files) {
            FileUtils.forceDelete(f);
        }
    }

    public void UpdateChangeListPanel(Set<String> files, String fromCommit, String toCommit) {
//        lastChangedListPath = builder.toString();
        StringBuilder builder = new StringBuilder();
        for (String filePath : files) {
            builder.append(filePath + "\n");
        }
        changeListPanel.setChangedListFilesTxt(builder.toString());
        changeListPanel.setFilesCount(files.size());
        changeListPanel.setAuthorNameLike(authorNameLike.getText());
        saveConfigActionPerformed(null);
    }

    private void pasteFromClipboardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteFromClipboardActionPerformed
        Clipboard clipboard = Toolkit.getDefaultToolkit().getSystemClipboard();
        Transferable contents = clipboard.getContents(null);
        boolean hasTransferableText
                = (contents != null)
                && contents.isDataFlavorSupported(DataFlavor.stringFlavor);
        if (hasTransferableText) {
            try {
                String commitId = (String) contents.getTransferData(DataFlavor.stringFlavor);
                if (commitId.length() == 40) {
                    if (fillBaseProjectPath() != null) {
                        if (!existCommitInCommitsTable(commitId)) {
                            String commitMessage = getCommitMessage(commitId);
                            if (!StringUtils.isEmpty(commitMessage)) {
                                DefaultTableModel model = (DefaultTableModel) commitsTable.getModel();
                                model.addRow(new Object[]{Boolean.FALSE, commitId, commitMessage, ""});
                                incrementNumnerOfCommits();
                            } else {
                                JOptionPane.showMessageDialog(this, "No Commits Found with this commit id.");
                                return;
                            }
                        } else {
                            JOptionPane.showMessageDialog(this, "This revision already exists in list.");
                            return;
                        }
                    } else {
                        return;
                    }
                }
            } catch (UnsupportedFlavorException ex) {
                Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_pasteFromClipboardActionPerformed

    private String getCommitMessage(String commitId) {
        baseProjectPath = baseProjectPathInp.getText();
        ProcessBuilder pb;
        List<String> commands = new ArrayList<String>();
        commands.add("git");
        commands.add("log");
        commands.add("--format=%s");
        commands.add(commitId + "~1.." + commitId);
        pb = new ProcessBuilder(commands);
        File projectDir = new File(baseProjectPath);
        projectDir.mkdir();
        pb.directory(projectDir);
        String commitMessage = "";
        try {
            Process p = pb.start();
            commitMessage = getString(p.getInputStream());
        } catch (IOException ex) {
            Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return commitMessage;
    }

    private void searchAndFillCommitIdInputBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchAndFillCommitIdInputBtnActionPerformed
        Thread searchAndFillCommitIdsThread = new Thread(new Runnable() {
            public void run() {
                searchAndFillCommitIds();
            }
        });
        searchAndFillCommitIdsThread.start();  
        
    }//GEN-LAST:event_searchAndFillCommitIdInputBtnActionPerformed

    private boolean searchAndFillCommitIds() throws HeadlessException {
        if (fillBaseProjectPath() == null) {
            disableSearchCommits();
            return true;
        }
        String commitHashIdsWithMessage = getCommitsWithMessage();
        String resultCommitIds = "";
        clearCommitsTable();
        if (!StringUtils.isEmpty(commitHashIdsWithMessage)) {
            String[] commitIdsWithMessage = commitHashIdsWithMessage.split("\n");
            for (String commitIdWithMessage : commitIdsWithMessage) {
                String[] spliteld = commitIdWithMessage.split("@@");
                if (resultCommitIds == "") {
                    resultCommitIds = spliteld[0];
                } else {
                    resultCommitIds += ", " + spliteld[0];
                }
                
                fillCommitsTable(spliteld);
            }
        }
        if (!StringUtils.isEmpty(resultCommitIds)) {
            String[] splitedResult = resultCommitIds.split(",");
            numberOfCommitsLbl.setText(String.valueOf(splitedResult.length));
        } else {
            JOptionPane.showMessageDialog(this, "No Commits Found with this criteria.");
            numberOfCommitsLbl.setText("0");
        }
        selectAllCommits.setSelected(false);
        return false;
    }

    private String getCommitsWithMessage() {
        baseProjectPath = baseProjectPathInp.getText();
        ProcessBuilder pb;
        List<String> commands = new ArrayList<String>();
        commands.add("git");
        commands.add("log");
        if (!StringUtils.isEmpty(authorNameLike.getText())) {
            commands.add("--author=" + authorNameLike.getText());
        }
        if (!StringUtils.isEmpty(commiteMessageLike.getText())) {
            String[] grepMessages = commiteMessageLike.getText().split("#");
            for (String grep : grepMessages) {
                if (!StringUtils.isEmpty(grep)) {
                    commands.add("--grep=" + grep);
                }
            }
        }
        commands.add("--regexp-ignore-case");
        commands.add("--format=%H@@%s");
        pb = new ProcessBuilder(commands);
        File projectDir = new File(baseProjectPath);
        projectDir.mkdir();
        pb.directory(projectDir);
        String commitHashIdsWithMessage = "";
        try {
            Process p = pb.start();
            commitHashIdsWithMessage = getString(p.getInputStream());
        } catch (IOException ex) {
            Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return commitHashIdsWithMessage;
    }

    public String processCommand(String gitPath, List<String> commands) {
        ProcessBuilder pb = new ProcessBuilder(commands);
        File projectDir = new File(gitPath);
        projectDir.mkdir();
        pb.directory(projectDir);
        String commandResult = "";
        try {
            Process p = pb.start();
            commandResult = getString(p.getInputStream());
        } catch (IOException ex) {
            Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(Level.SEVERE, null, ex);
        }
        return commandResult;
    }

    private void openSavedFolderBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openSavedFolderBtnActionPerformed
        openSavedSourcesDir();
    }//GEN-LAST:event_openSavedFolderBtnActionPerformed

    public void openSavedSourcesDir() throws HeadlessException {
        fillBaseSaveProjectPath();
        if (!StringUtils.isEmpty(saveResultPath)) {
            try {
                File file = new File(saveResultPath);
                if (!file.exists()) {
                    FileUtils.forceMkdir(file);
                }
                Desktop.getDesktop().open(file);
            } catch (IOException ex) {
                Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void authorNameLikeKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_authorNameLikeKeyTyped

    }//GEN-LAST:event_authorNameLikeKeyTyped

    private void baseProjectPathInpKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_baseProjectPathInpKeyReleased
        if (!StringUtils.isEmpty(baseProjectPathInp.getText())) {
            if (checkValidRepo(baseProjectPathInp.getText())) {
                enableSearchCommits();
            } else {
                disableSearchCommits();
            }
        }
    }//GEN-LAST:event_baseProjectPathInpKeyReleased

    private void selectAllCommitsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllCommitsActionPerformed

    }//GEN-LAST:event_selectAllCommitsActionPerformed

    private void selectAllCommitsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_selectAllCommitsItemStateChanged
//        JCheckBox source = (JCheckBox) evt.getSource();
        int stateChange = evt.getStateChange();
        if (stateChange == 1) {
            checkAllComiits();
        } else {
            UnCkeckAllCommits();
        }
    }//GEN-LAST:event_selectAllCommitsItemStateChanged

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    try {
                        for (UIManager.LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                            if ("Windows Classic".equals(info.getName())) {
                                UIManager.setLookAndFeel(info.getClassName());
                                break;
                            }
                        }
                    } catch (ClassNotFoundException ex) {
                        Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (InstantiationException ex) {
                        Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (IllegalAccessException ex) {
                        Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(Level.SEVERE, null, ex);
                    } catch (UnsupportedLookAndFeelException ex) {
                        Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    new GetAffectedFilesInCommitForm().setVisible(true);
                } catch (IOException ex) {
                    Logger.getLogger(GetAffectedFilesInCommitForm.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel alarmMessageLbl;
    private javax.swing.JTextField authorNameLike;
    private javax.swing.JTextField baseProjectPathInp;
    private javax.swing.JButton clearSearchCommitPanelBtn;
    private javax.swing.JTextField commiteMessageLike;
    private javax.swing.JTable commitsTable;
    private javax.swing.JButton getSourcesFromGitBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JCheckBox loadLatestVersion;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JLabel numberOfCommitsLbl;
    private javax.swing.JButton openSavedFolderBtn;
    private javax.swing.JButton pasteFromClipboard;
    private javax.swing.JButton projectBasePathSelectorBtn;
    private javax.swing.JButton resetUIToConfigValue;
    private javax.swing.JButton saveConfig;
    private javax.swing.JTextField saveProjectPathInp;
    private javax.swing.JButton saveProjectPathSelector;
    private javax.swing.JButton searchAndFillCommitIdInputBtn;
    private javax.swing.JCheckBox selectAllCommits;
    // End of variables declaration//GEN-END:variables

    public HashMap<String, List<String>> getAffectedFilesInCommits(List<String> commitIds) throws IOException {
        HashMap<String, List<String>> changeListTotal = new HashMap<String, List<String>>();
        for (String commitId : commitIds) {
            commitId = commitId.trim();
            List<String> changeList = getChangeListForCommit(commitId);
            for (String file : changeList) {
                String filePath = file.substring(0, file.lastIndexOf("/") + 1);
                String fileName = file.substring(file.lastIndexOf("/"));
                FileUtils.forceMkdir(new File(saveResultPath + "/" + filePath));
                getFileFromGitAndSaveIt(commitId, file, fileName);
            }
            changeListTotal.put(commitId, changeList);
        }
        return changeListTotal;
    }

    private List<String> getChangeListForCommit(String commitId) throws IOException {
        return getChangeListForCommit(commitId, true, saveResultPath, baseProjectPath);
    }

    public static List<String> getChangeListForCommit(String commitId, boolean makeResultPath, String saveResultPath, String gitProjectPath) throws IOException {
        List<String> resultChangeList = new ArrayList<String>();
        if (makeResultPath) {
            FileUtils.forceMkdir(new File(saveResultPath));
        }
        commitId = commitId.trim();
        ProcessBuilder pb = new ProcessBuilder("git", "diff-tree", "--no-commit-id", "--name-only", "-r", commitId);
        File projectDir = new File(gitProjectPath);
        projectDir.mkdir();
        pb.directory(projectDir);
        Process p = pb.start();
        String changeList = getString(p.getInputStream());

        if (!StringUtils.isEmpty(changeList)) {
            String[] splicedChangeList = changeList.split("\n");
            for (String changedFile : splicedChangeList) {
                resultChangeList.add(changedFile);
            }
        }
        return resultChangeList;
    }

    private void appendCommitedFilesInChangeListFile(File changeListFile, String commitId, List<String> commitedFilePaths) throws FileNotFoundException, IOException {

        FileWriter fileWriter = new FileWriter(changeListFile, true);
        fileWriter.write("Commit ID: " + commitId + System.lineSeparator() + System.lineSeparator());
        fileWriter.write("Change List: " + System.lineSeparator());
        for (String commitedFile : commitedFilePaths) {
            fileWriter.write(commitedFile + System.lineSeparator());
        }
        fileWriter.write("---------------------------------------------" + System.lineSeparator());
        fileWriter.close();
    }

    public void appendCommitedFilesInChangeListFile(String commitId, List<String> commitedFilePaths) throws FileNotFoundException, IOException {
        File changeListFile = new File(saveResultPath + SEPARATOR + CHANGE_LIST_FILE_NAME);
        if (changeListFile.exists()) {
            changeListFile.delete();
        }
        appendCommitedFilesInChangeListFile(changeListFile, commitId, commitedFilePaths);
    }

    public void getFileFromGitAndSaveIt(String commitId, String filePath, String fileName) throws IOException {
        File parentFile = new File(baseProjectPath);
        if (loadLatestVersion.isSelected()) {
            commitId = "HEAD";
        }
        ProcessBuilder pb = new ProcessBuilder("git", "show", commitId + ":" + filePath);
        pb.directory(parentFile);
        Process p = pb.start();
        System.out.println("Reading File: " + filePath);
        InputStream stdIn = new BufferedInputStream(p.getInputStream());
        FileOutputStream stdoutFile = new FileOutputStream(saveResultPath + "/" + filePath);
        FileUtils.forceMkdir(new File(saveResultPath + ALL_IN_ONE_PLACE_FOLDER_NAME + SEPARATOR + commitId));
        FileOutputStream stdoutFileAll = new FileOutputStream(saveResultPath + ALL_IN_ONE_PLACE_FOLDER_NAME + SEPARATOR + commitId + fileName);
        IOUtils.copy(stdIn, stdoutFile);
        stdoutFile.close();
        stdIn.close();
        FileInputStream fileInputStream = new FileInputStream(saveResultPath + "/" + filePath);
        IOUtils.copy(fileInputStream, stdoutFileAll);
        fileInputStream.close();
        stdoutFileAll.close();
        p.destroy();
    }

    public static String getString(InputStream is) throws IOException {
        StringBuilder sb = new StringBuilder();
        try {
            String UTF8 = "utf8";
            int BUFFER_SIZE = 8192;

            BufferedReader br = new BufferedReader(new InputStreamReader(is,
                    UTF8), BUFFER_SIZE);
            String str;
            while ((str = br.readLine()) != null) {
                sb.append(str + "\n");
            }
        } catch (Exception e) {

        }
        return sb.toString();
    }

    private void updateUIBasedOnProperties(Properties properties) {
        saveProjectPathInp.setText(properties.getProperty("SaveProjectPath"));
        saveResultPath = properties.getProperty("SaveProjectPath");
        baseProjectPathInp.setText(properties.getProperty("ProjectPath"));
        baseProjectPath = properties.getProperty("ProjectPath");
        commiteMessageLike.setText(properties.getProperty("CommitMessageLike"));
        authorNameLike.setText(properties.getProperty("AuthorNameLike"));
//        commitIdsInp2.setText(properties.getProperty("CommitIds"));
        loadLatestVersion.setSelected(Boolean.valueOf(properties.getProperty("LoadLatestVersion")));
        lastChangedListPath = properties.getProperty("LastChangedList");
        numberOfCommitsLbl.setText(properties.getProperty("NumberOfCommits"));
        changeListPanel.setAuthorNameLike(properties.getProperty("AuthorNameLikeForDiff"));
        changeListPanel.setFromCommit(properties.getProperty("FromCommit"));
        changeListPanel.setToCommit(properties.getProperty("ToCommit"));
    }

    public String fillBaseProjectPath() {
        if (StringUtils.isEmpty(baseProjectPathInp.getText())) {
            JOptionPane.showMessageDialog(this, "Please select project directory first!");
            return null;
        }
        if (!checkValidRepo(baseProjectPathInp.getText())) {
            JOptionPane.showMessageDialog(this, "Please select a valid GIT repository.");
            return null;
        }
        baseProjectPath = baseProjectPathInp.getText();
        return baseProjectPath;
    }

    public String fillBaseSaveProjectPath() {
        if (StringUtils.isEmpty(saveProjectPathInp.getText())) {
            JOptionPane.showMessageDialog(this, "Please select save sources directory!");
            return null;
        }
        saveResultPath = saveProjectPathInp.getText();
        return saveResultPath;
    }

    private Set<String> getGITUsers() {
        Set<String> users = new HashSet<String>();
        List<String> getUsersCommand = new ArrayList<String>();
        getUsersCommand.add("git");
        getUsersCommand.add("log");
        getUsersCommand.add("--pretty");
        getUsersCommand.add("--format=%aN");
        String processCommandResult = processCommand(baseProjectPath, getUsersCommand);
        String[] split = processCommandResult.split("\n");
        for (String user : split) {
            users.add(user);
        }
        return users;
    }

    private void disableSearchCommits() {
        commiteMessageLike.setEnabled(false);
        authorNameLike.setEnabled(false);
        searchAndFillCommitIdInputBtn.setEnabled(false);
        clearCommitsTable();
    }

    private void enableSearchCommits() {
        authorNameLike.setEnabled(true);
        commiteMessageLike.setEnabled(true);
        searchAndFillCommitIdInputBtn.setEnabled(true);
    }

    private List<String> getCommiteIdsFromTable(boolean callFromSearchAll) {
        if (!callFromSearchAll) {
            return getSelectedRowCommiteId();
        }
        TableModel model = commitsTable.getModel();
        List<String> result = new ArrayList<String>();
        int rowCount = model.getRowCount();
        for (int i = rowCount-1; i >= 0; i--) {
            Boolean checked = (Boolean) model.getValueAt(i, 0);
            if (checked) {
                result.add((String) model.getValueAt(i, 1));
            }
        }
        return result;
    }

    private List<String> getSelectedRowCommiteId() {
        DefaultTableModel model = (DefaultTableModel) commitsTable.getModel();
        List<String> result = new ArrayList<String>();
        result.add((String) commitsTable.getValueAt(commitsTable.getSelectedRow(), 1));
        return result;
    }

    private void clearCommitsTable() {
        DefaultTableModel tableModel = (DefaultTableModel) commitsTable.getModel();
        tableModel.setNumRows(0);
        numberOfCommitsLbl.setText("0");
    }

    private void fillCommitsTable(String[] commitIdWithMessage) {
        DefaultTableModel tableModel = (DefaultTableModel) commitsTable.getModel();
        Vector vector = new Vector();
        vector.add(Boolean.FALSE);
        vector.add(commitIdWithMessage[0]);
        vector.add(commitIdWithMessage[1]);
        vector.add(null);
        tableModel.addRow(vector);
        commitsTable.setRowHeight(commitsTable.getRowCount() - 1, 30);
    }

    private void incrementNumnerOfCommits() {
        int rowCount = commitsTable.getRowCount();
        numberOfCommitsLbl.setText(String.valueOf(rowCount));
    }

    private boolean existCommitInCommitsTable(String commitId) {
        DefaultTableModel model = (DefaultTableModel) commitsTable.getModel();
        for (int i = 0; i < model.getRowCount(); i++) {
            String rowCommitId = (String) model.getValueAt(i, 1);
            if (rowCommitId.trim().equals(commitId.trim())) {
                return true;
            }
        }
        return false;
    }

    private void checkAllComiits() {
        for (int i = 0; i < commitsTable.getRowCount(); i++) {
            commitsTable.setValueAt(Boolean.TRUE, i, 0);
        }
    }

    private void UnCkeckAllCommits() {
        for (int i = 0; i < commitsTable.getRowCount(); i++) {
            commitsTable.setValueAt(Boolean.FALSE, i, 0);
        }
    }
}
